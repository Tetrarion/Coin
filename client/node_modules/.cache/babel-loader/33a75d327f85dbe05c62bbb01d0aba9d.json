{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrgil\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\Coincap\\\\Coin\\\\src\\\\components\\\\Form\\\\Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as actions from '../../Store/actions';\nimport { Button } from '../Button/Button';\nimport { Input } from '../Input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Form(_ref) {\n  _s();\n\n  let {\n    id,\n    rateId,\n    priceUsd,\n    symbol\n  } = _ref;\n  const [inputValue, setInputValue] = useState(0);\n  const [message, setMessage] = useState('');\n  const [totalPrice, setTotalPrice] = useState('');\n  const [currencySymbol, setCurrencySymbol] = useState('');\n  const [errorMessage, setErroMessage] = useState('');\n  const [hidden, setHidden] = useState(true);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setMessage(document.querySelector('.message'));\n  }, []);\n\n  const showTotalPrice = value => {\n    setInputValue(value);\n\n    if (Number.isNaN(value * priceUsd) || hidden === false) {\n      setTotalPrice('');\n      setCurrencySymbol('');\n    } else {\n      setTotalPrice(value * priceUsd);\n      setCurrencySymbol(symbol);\n    }\n  };\n\n  const showErrorMessage = text => {\n    setErroMessage(text);\n    setHidden(false);\n    setTimeout(() => {\n      setHidden(true);\n    }, 4000);\n  };\n\n  const checkForCorrect = () => {\n    if (inputValue < 0) {\n      showErrorMessage('You need to enter a positive number');\n    } else if (!inputValue) {\n      showErrorMessage('You need to enter a number');\n    } else {\n      setHidden(true);\n      dispatch(actions.loadCoin(id, inputValue, message, rateId));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      errorMessage: errorMessage,\n      showValue: showTotalPrice,\n      hidden: hidden\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"add\",\n      text: \"Add to basket\",\n      func: checkForCorrect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__text\",\n      children: [currencySymbol, ' ', totalPrice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Form, \"yZPk9f2zE0BFUABKZ066vT+qyq4=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["C:/Users/mrgil/OneDrive/Рабочий стол/Coincap/Coin/src/components/Form/Form.jsx"],"names":["React","useEffect","useState","useDispatch","actions","Button","Input","Form","id","rateId","priceUsd","symbol","inputValue","setInputValue","message","setMessage","totalPrice","setTotalPrice","currencySymbol","setCurrencySymbol","errorMessage","setErroMessage","hidden","setHidden","dispatch","document","querySelector","showTotalPrice","value","Number","isNaN","showErrorMessage","text","setTimeout","checkForCorrect","loadCoin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../../Store/actions';\r\nimport { Button } from '../Button/Button';\r\nimport { Input } from '../Input/Input';\r\n\r\nexport function Form({\r\n  id, rateId, priceUsd, symbol,\r\n}) {\r\n  const [inputValue, setInputValue] = useState(0);\r\n  const [message, setMessage] = useState('');\r\n  const [totalPrice, setTotalPrice] = useState('');\r\n  const [currencySymbol, setCurrencySymbol] = useState('');\r\n  const [errorMessage, setErroMessage] = useState('');\r\n  const [hidden, setHidden] = useState(true);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    setMessage(document.querySelector('.message'));\r\n  }, []);\r\n\r\n  const showTotalPrice = (value) => {\r\n    setInputValue(value);\r\n    if (Number.isNaN(value * priceUsd) || hidden === false) {\r\n      setTotalPrice('');\r\n      setCurrencySymbol('');\r\n    } else {\r\n      setTotalPrice(value * priceUsd);\r\n      setCurrencySymbol(symbol);\r\n    }\r\n  };\r\n\r\n  const showErrorMessage = (text) => {\r\n    setErroMessage(text);\r\n    setHidden(false);\r\n    setTimeout(() => { setHidden(true); }, 4000);\r\n  };\r\n\r\n  const checkForCorrect = () => {\r\n    if (inputValue < 0) {\r\n      showErrorMessage('You need to enter a positive number');\r\n    } else if (!inputValue) {\r\n      showErrorMessage('You need to enter a number');\r\n    } else {\r\n      setHidden(true);\r\n      dispatch(actions.loadCoin(id, inputValue, message, rateId));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <Input errorMessage={errorMessage} showValue={showTotalPrice} hidden={hidden} />\r\n      <Button type=\"add\" text=\"Add to basket\" func={checkForCorrect} />\r\n      <div className=\"form__text\">\r\n        {currencySymbol}\r\n        {' '}\r\n        {totalPrice}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}