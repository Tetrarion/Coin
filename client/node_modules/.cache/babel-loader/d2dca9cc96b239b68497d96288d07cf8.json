{"ast":null,"code":"import { useQuery } from '@apollo/client';\nimport * as actions from './actionTypes';\nimport { GET_RATE } from '../query/rates';\nimport { GET_COIN } from '../query/coins';\nexport const addCoin = data => ({\n  type: actions.COIN_ADD,\n  payload: {\n    name: data.coinResponse.name,\n    symbol: data.rateResponse.currencySymbol,\n    count: data.count,\n    price: data.price,\n    coinTotalPrice: data.coinTotalPrice,\n    coinTotalPriceUsd: data.coinTotalPriceUsd,\n    key: data.coinResponse.id\n  }\n});\nexport const removeCoin = id => ({\n  type: actions.COIN_REMOVE,\n  payload: {\n    id\n  }\n});\nexport const loadCoin = (id, count, message, rateId) => {\n  var _s = $RefreshSig$();\n\n  return _s(async dispatch => {\n    _s();\n\n    const {\n      data: rate\n    } = useQuery(GET_RATE, {\n      variables: {\n        id: rateId\n      }\n    });\n    const {\n      data: coin\n    } = useQuery(GET_COIN, {\n      variables: {\n        id\n      }\n    });\n    const coinResponse = coin.getCoin;\n    const rateResponse = rate.getRate;\n    const coinTotalPrice = coinResponse.priceUsd * count * rateResponse.rateUsd;\n    const coinTotalPriceUsd = coinResponse.priceUsd * count;\n    const price = coinResponse.priceUsd * rateResponse.rateUsd;\n    dispatch(addCoin({\n      rateResponse,\n      coinResponse,\n      count,\n      price,\n      coinTotalPrice,\n      coinTotalPriceUsd\n    }));\n    message.classList.remove('message--hidden');\n    setTimeout(() => message.classList.add('message--hidden'), 3000);\n  }, \"hQEjJ7Xx9yJPgaCEAWUi556XMAg=\", false, function () {\n    return [useQuery, useQuery];\n  });\n};","map":{"version":3,"sources":["C:/Users/mrgil/OneDrive/Рабочий стол/Coincap/Coin/client/src/Store/actions.js"],"names":["useQuery","actions","GET_RATE","GET_COIN","addCoin","data","type","COIN_ADD","payload","name","coinResponse","symbol","rateResponse","currencySymbol","count","price","coinTotalPrice","coinTotalPriceUsd","key","id","removeCoin","COIN_REMOVE","loadCoin","message","rateId","dispatch","rate","variables","coin","getCoin","getRate","priceUsd","rateUsd","classList","remove","setTimeout","add"],"mappings":"AAAA,SAASA,QAAT,QAAyB,gBAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEL,OAAO,CAACM,QADkB;AAEhCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAEJ,IAAI,CAACK,YAAL,CAAkBD,IADjB;AAEPE,IAAAA,MAAM,EAAEN,IAAI,CAACO,YAAL,CAAkBC,cAFnB;AAGPC,IAAAA,KAAK,EAAET,IAAI,CAACS,KAHL;AAIPC,IAAAA,KAAK,EAAEV,IAAI,CAACU,KAJL;AAKPC,IAAAA,cAAc,EAAEX,IAAI,CAACW,cALd;AAMPC,IAAAA,iBAAiB,EAAEZ,IAAI,CAACY,iBANjB;AAOPC,IAAAA,GAAG,EAAEb,IAAI,CAACK,YAAL,CAAkBS;AAPhB;AAFuB,CAAX,CAAhB;AAYP,OAAO,MAAMC,UAAU,GAAID,EAAD,KAAS;AACjCb,EAAAA,IAAI,EAAEL,OAAO,CAACoB,WADmB;AAEjCb,EAAAA,OAAO,EAAE;AAAEW,IAAAA;AAAF;AAFwB,CAAT,CAAnB;AAIP,OAAO,MAAMG,QAAQ,GAAG,CAACH,EAAD,EAAKL,KAAL,EAAYS,OAAZ,EAAqBC,MAArB;AAAA;;AAAA,YAAgC,MAAOC,QAAP,IAAoB;AAAA;;AAC1E,UAAM;AAAEpB,MAAAA,IAAI,EAAEqB;AAAR,QAAiB1B,QAAQ,CAACE,QAAD,EAAW;AACxCyB,MAAAA,SAAS,EAAE;AACTR,QAAAA,EAAE,EAAEK;AADK;AAD6B,KAAX,CAA/B;AAKA,UAAM;AAAEnB,MAAAA,IAAI,EAAEuB;AAAR,QAAiB5B,QAAQ,CAACG,QAAD,EAAW;AACxCwB,MAAAA,SAAS,EAAE;AACTR,QAAAA;AADS;AAD6B,KAAX,CAA/B;AAKA,UAAMT,YAAY,GAAGkB,IAAI,CAACC,OAA1B;AACA,UAAMjB,YAAY,GAAGc,IAAI,CAACI,OAA1B;AACA,UAAMd,cAAc,GAAGN,YAAY,CAACqB,QAAb,GAAwBjB,KAAxB,GAAgCF,YAAY,CAACoB,OAApE;AACA,UAAMf,iBAAiB,GAAGP,YAAY,CAACqB,QAAb,GAAwBjB,KAAlD;AACA,UAAMC,KAAK,GAAGL,YAAY,CAACqB,QAAb,GAAwBnB,YAAY,CAACoB,OAAnD;AACAP,IAAAA,QAAQ,CAACrB,OAAO,CAAC;AACfQ,MAAAA,YADe;AAEfF,MAAAA,YAFe;AAGfI,MAAAA,KAHe;AAIfC,MAAAA,KAJe;AAKfC,MAAAA,cALe;AAMfC,MAAAA;AANe,KAAD,CAAR,CAAR;AAQAM,IAAAA,OAAO,CAACU,SAAR,CAAkBC,MAAlB,CAAyB,iBAAzB;AACAC,IAAAA,UAAU,CAAC,MAAMZ,OAAO,CAACU,SAAR,CAAkBG,GAAlB,CAAsB,iBAAtB,CAAP,EAAiD,IAAjD,CAAV;AACD,GA1BuB;AAAA,YACCpC,QADD,EAMCA,QAND;AAAA;AAAA,CAAjB","sourcesContent":["import { useQuery } from '@apollo/client';\r\nimport * as actions from './actionTypes';\r\nimport { GET_RATE } from '../query/rates';\r\nimport { GET_COIN } from '../query/coins';\r\n\r\nexport const addCoin = (data) => ({\r\n  type: actions.COIN_ADD,\r\n  payload: {\r\n    name: data.coinResponse.name,\r\n    symbol: data.rateResponse.currencySymbol,\r\n    count: data.count,\r\n    price: data.price,\r\n    coinTotalPrice: data.coinTotalPrice,\r\n    coinTotalPriceUsd: data.coinTotalPriceUsd,\r\n    key: data.coinResponse.id,\r\n  },\r\n});\r\nexport const removeCoin = (id) => ({\r\n  type: actions.COIN_REMOVE,\r\n  payload: { id },\r\n});\r\nexport const loadCoin = (id, count, message, rateId) => async (dispatch) => {\r\n  const { data: rate } = useQuery(GET_RATE, {\r\n    variables: {\r\n      id: rateId,\r\n    },\r\n  });\r\n  const { data: coin } = useQuery(GET_COIN, {\r\n    variables: {\r\n      id,\r\n    },\r\n  });\r\n  const coinResponse = coin.getCoin;\r\n  const rateResponse = rate.getRate;\r\n  const coinTotalPrice = coinResponse.priceUsd * count * rateResponse.rateUsd;\r\n  const coinTotalPriceUsd = coinResponse.priceUsd * count;\r\n  const price = coinResponse.priceUsd * rateResponse.rateUsd;\r\n  dispatch(addCoin({\r\n    rateResponse,\r\n    coinResponse,\r\n    count,\r\n    price,\r\n    coinTotalPrice,\r\n    coinTotalPriceUsd,\r\n  }));\r\n  message.classList.remove('message--hidden');\r\n  setTimeout(() => message.classList.add('message--hidden'), 3000);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}