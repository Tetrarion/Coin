{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrgil\\\\OneDrive\\\\\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B\\\\Coincap\\\\Coin\\\\src\\\\Main\\\\LitsPage\\\\CoinsPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { CoinBlock } from './components/CoinList';\nimport { Header } from './components/CoinsHeader';\nimport { Pagination } from './components/Pagination';\nimport { sortCoins } from '../../utilities/sortCoins';\nimport getInfo from '../../API/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListPage(_ref) {\n  _s();\n\n  let {\n    searchText,\n    coinsPerPage,\n    rate\n  } = _ref;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentCoins, setCurrentCoins] = useState([]);\n  const [totalCoins, setTotalCoins] = useState(2000);\n  const [time, setTime] = useState(0);\n  const [totalPages, setTotalPages] = useState(200);\n  const [sortName, setSortName] = useState('');\n  const [allCoins, setAllCoins] = useState(0);\n  const [sortedCoins, setSortedCoins] = useState([]);\n\n  const pagination = pageNamber => setCurrentPage(pageNamber);\n\n  const sort = name => setSortName(name);\n\n  const firstCoinsIndex = currentPage * coinsPerPage - coinsPerPage;\n  const lastCoinsIndex = firstCoinsIndex + coinsPerPage;\n  const screenWidth = window.screen.width;\n  useEffect(() => {\n    const update = () => {\n      setTime(prevTime => prevTime + 1);\n      setTimeout(update, 10000);\n    };\n\n    update();\n  }, []);\n  useEffect(() => {\n    setTotalPages(Math.ceil(totalCoins / coinsPerPage));\n  }, [totalCoins, coinsPerPage]);\n  useEffect(() => {\n    const getAllCoins = async () => {\n      const response = await getInfo('assets/?limit=2000');\n      setAllCoins(response);\n    };\n\n    getAllCoins();\n  }, [time]);\n  useEffect(() => {\n    const getCoins = async () => {\n      let response;\n\n      if (searchText.length) {\n        const responseCount = await getInfo(`assets/?search=${searchText}&limit=2000`);\n        response = await getInfo(`assets/?offset=${firstCoinsIndex}&limit=${coinsPerPage}&search=${searchText}`);\n        setTotalCoins(responseCount.length);\n      } else {\n        if (sortedCoins.length) return;\n        response = await getInfo(`assets/?offset=${firstCoinsIndex}&limit=${coinsPerPage}`);\n        setTotalCoins(2000);\n      }\n\n      setCurrentCoins(response);\n    };\n\n    getCoins();\n  }, [coinsPerPage, time, currentPage, searchText, rate, sortedCoins.length, firstCoinsIndex]);\n  useEffect(() => {\n    if (sortName) setSortedCoins(sortCoins(sortName, allCoins));\n  }, [sortName, allCoins]);\n  useEffect(() => {\n    if (searchText.length || !sortedCoins.length) return;\n    setCurrentCoins(sortedCoins.slice(firstCoinsIndex, lastCoinsIndex));\n  }, [sortedCoins, searchText, firstCoinsIndex, lastCoinsIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      sort: sort\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoinBlock, {\n      coins: currentCoins,\n      rate: rate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      totalPages: totalPages,\n      pagination: pagination\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ListPage, \"BezIcNBWfZ0mrvGFgGgfqvHqAwk=\");\n\n_c = ListPage;\nexport default ListPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListPage\");","map":{"version":3,"sources":["C:/Users/mrgil/OneDrive/Рабочий стол/Coincap/Coin/src/Main/LitsPage/CoinsPage.jsx"],"names":["React","useEffect","useState","CoinBlock","Header","Pagination","sortCoins","getInfo","ListPage","searchText","coinsPerPage","rate","currentPage","setCurrentPage","currentCoins","setCurrentCoins","totalCoins","setTotalCoins","time","setTime","totalPages","setTotalPages","sortName","setSortName","allCoins","setAllCoins","sortedCoins","setSortedCoins","pagination","pageNamber","sort","name","firstCoinsIndex","lastCoinsIndex","screenWidth","window","screen","width","update","prevTime","setTimeout","Math","ceil","getAllCoins","response","getCoins","length","responseCount","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { CoinBlock } from './components/CoinList';\r\nimport { Header } from './components/CoinsHeader';\r\nimport { Pagination } from './components/Pagination';\r\nimport { sortCoins } from '../../utilities/sortCoins';\r\nimport getInfo from '../../API/api';\r\n\r\nfunction ListPage({ searchText, coinsPerPage, rate }) {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [currentCoins, setCurrentCoins] = useState([]);\r\n  const [totalCoins, setTotalCoins] = useState(2000);\r\n  const [time, setTime] = useState(0);\r\n  const [totalPages, setTotalPages] = useState(200);\r\n  const [sortName, setSortName] = useState('');\r\n  const [allCoins, setAllCoins] = useState(0);\r\n  const [sortedCoins, setSortedCoins] = useState([]);\r\n\r\n  const pagination = (pageNamber) => setCurrentPage(pageNamber);\r\n\r\n  const sort = (name) => setSortName(name);\r\n\r\n  const firstCoinsIndex = (currentPage * coinsPerPage) - coinsPerPage;\r\n  const lastCoinsIndex = firstCoinsIndex + coinsPerPage;\r\n\r\n  const screenWidth = window.screen.width;\r\n\r\n  useEffect(() => {\r\n    const update = () => {\r\n      setTime((prevTime) => prevTime + 1);\r\n      setTimeout(update, 10000);\r\n    };\r\n    update();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTotalPages(Math.ceil(totalCoins / coinsPerPage));\r\n  }, [totalCoins, coinsPerPage]);\r\n\r\n  useEffect(() => {\r\n    const getAllCoins = async () => {\r\n      const response = await getInfo('assets/?limit=2000');\r\n      setAllCoins(response);\r\n    };\r\n    getAllCoins();\r\n  }, [time]);\r\n\r\n  useEffect(() => {\r\n    const getCoins = async () => {\r\n      let response;\r\n      if (searchText.length) {\r\n        const responseCount = await getInfo(`assets/?search=${searchText}&limit=2000`);\r\n        response = await getInfo(`assets/?offset=${firstCoinsIndex}&limit=${coinsPerPage}&search=${searchText}`);\r\n        setTotalCoins(responseCount.length);\r\n      } else {\r\n        if (sortedCoins.length) return;\r\n        response = await getInfo(`assets/?offset=${firstCoinsIndex}&limit=${coinsPerPage}`);\r\n        setTotalCoins(2000);\r\n      }\r\n      setCurrentCoins(response);\r\n    };\r\n    getCoins();\r\n  }, [coinsPerPage, time, currentPage, searchText, rate, sortedCoins.length, firstCoinsIndex]);\r\n\r\n  useEffect(() => {\r\n    if (sortName) setSortedCoins(sortCoins(sortName, allCoins));\r\n  }, [sortName, allCoins]);\r\n\r\n  useEffect(() => {\r\n    if (searchText.length || !sortedCoins.length) return;\r\n    setCurrentCoins(sortedCoins.slice(firstCoinsIndex, lastCoinsIndex));\r\n  }, [sortedCoins, searchText, firstCoinsIndex, lastCoinsIndex]);\r\n\r\n  return (\r\n    <div className=\"list-page\">\r\n      <Header sort={sort} />\r\n      <CoinBlock coins={currentCoins} rate={rate} />\r\n      <Pagination totalPages={totalPages} pagination={pagination} />\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default ListPage;\r\n"]},"metadata":{},"sourceType":"module"}